{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","height","width","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Navbar","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","Nav","path","exact","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.419d0e7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","import {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  ADD_TO_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\nimport { useReducer } from 'react';\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","export const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS';\r\nexport const UPDATE_CATEGORIES = 'UPDATE_CATEGORIES';\r\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\n","import React, { createContext, useContext } from 'react';\r\nimport { useProductReducer } from './reducers';\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useProductReducer({\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n  });\r\n  // use this to confirm it works!\r\n  console.log(state);\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n  const [state, dispatch] = useStoreContext();\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className='card px-1 py-1'>\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} height='400px' width='400px' />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize('item', quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { idbPromise } from '../../utils/helpers';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className='my-2'>\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className='flex-row'>\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt='loading' /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport React, { useEffect } from 'react';\nimport { idbPromise } from '../../utils/helpers';\n\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst CartItem = ({ item }) => {\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id,\r\n      });\r\n\r\n      idbPromise('cart', 'delete', { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value),\r\n      });\r\n\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex-row'>\r\n      <div>\r\n        <img src={`/images/${item.image}`} alt='' />\r\n      </div>\r\n      <div>\r\n        <div>\r\n          {item.name}, ${item.price}\r\n        </div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type='number'\r\n            placeholder='1'\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />{' '}\r\n          <span\r\n            role='img'\r\n            aria-label='trash'\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport React, { useEffect } from 'react';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className='cart-closed' onClick={toggleCart}>\r\n        <span role='img' aria-label='trash'>\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  console.log(state);\r\n  return (\r\n    <div className='cart'>\r\n      <div className='close' onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n          <div className='flex-row space-between'>\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {Auth.loggedIn() ? (\r\n              <button>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role='img' aria-label='shocked'>\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState } from 'react';\nimport ProductList from '../components/ProductList';\nimport CategoryMenu from '../components/CategoryMenu';\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className='container'>\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  const { products, cart } = state;\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className='container my-1'>\n          <Link to='/'>← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>{' '}\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt='loading' /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from 'react';\nimport Auth from '../../utils/auth';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    function showNavigation() {\n        if (Auth.loggedIn()) {\n            return (\n                <ul className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <li className=\"mx-1\">\n                        <Link to=\"/orderHistory\">Order History</Link>\n                    </li>\n                    <li className=\"mx-1\">\n                        {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n                        <a href=\"/\" onClick={() => Auth.logout()}>\n                            Logout\n                        </a>\n                    </li>\n                </ul>\n            );\n        } else {\n            return (\n                <ul className=\"flex-row\">\n                    <li className=\"mx-1\">\n                        <Link to=\"/signup\">Signup</Link>\n                    </li>\n                    <li className=\"nav-item nav-link\">\n                        <Link to=\"login\" className=\"btn btn-outline-dark m-2\">\n                            <i className=\"fa fa-sign-in\"></i> Login\n                        </Link>{' '}\n                    </li>\n                </ul>\n            );\n        }\n    }\n\n    return (\n        <header className=\"flex-row px-1\">\n            <h1>\n                <Link className=\"navbar-brand\" to=\"/\">\n                    Jamie's\n                </Link>\n            </h1>\n\n            <nav>{showNavigation()}</nav>\n        </header>\n    );\n};\n\nexport default Navbar;\n\n// function showNavigation() {\n//   if (Auth.loggedIn()) {\n//       return (\n//           <ul className=\"navbar navbar-expand-lg navbar-light bg-light\">\n//               <li className=\"mx-1\">\n//                   <Link to=\"/orderHistory\">Order History</Link>\n//               </li>\n//               <li className=\"mx-1\">\n//                   {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n//                   <a href=\"/\" onClick={() => Auth.logout()}>\n//                       Logout\n//                   </a>\n//               </li>\n//           </ul>\n//       );\n//   } else {\n//       return (\n//           <ul className=\"flex-row\">\n//               <li className=\"mx-1\">\n//                   <Link to=\"/signup\">Signup</Link>\n//               </li>\n//               <li className=\"nav-item nav-link\">\n//                   <Link to=\"login\" className=\"btn btn-outline-dark m-2\">\n//                       <i className=\"fa fa-sign-in\"></i> Login\n//                   </Link>{' '}\n//               </li>\n//           </ul>\n//       );\n//   }\n// }\n\n// return (\n//   <header className=\"flex-row px-1\">\n//       <h1>\n//           <Link className=\"navbar-brand\" to=\"/\">\n//               Jamie's\n//           </Link>\n//       </h1>\n\n//       <nav>{showNavigation()}</nav>\n//   </header>\n// );\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    createHttpLink\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Navbar from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n    uri: '/graphql'\n});\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('id_token');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : ''\n        }\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div>\n                    <StoreProvider>\n                        <Navbar />\n                        <Routes>\n                            <Route path=\"/\" exact element={<Home />} />\n                            <Route path=\"/login\" element={<Login />} />\n                            <Route path=\"/signup\" element={<Signup />} />\n                            <Route\n                                path=\"/orderHistory\"\n                                element={<OrderHistory />}\n                            />\n                            <Route path=\"/products/:id\" element={<Detail />} />\n                        </Routes>\n                    </StoreProvider>\n                </div>\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}